
let mycar = {make: 'Honda', model: 'Accord', year: 1998}
delete mycar.make
'make' in mycar   // returns false

let trees = new Array('redwood', 'bay', 'cedar', 'oak', 'maple')
delete trees[3]
3 in trees  // returns false

--------------------------------------------------------
function addFunc(x,y){
	console.log(x+y+ this.z);
	//return x+y+this.z;
}
var passThisObject = { z: 30 };

addFunc.call(passThisObject, 10, 20, 100);
addFunc.apply(passThisObject, [10, 20, 100]);
addFunc.bind(someObject, 10, 20, 100);
addFunc.bind(someObject, 30, 40, 200);// not claaed because called once
--------------------------------------------------------
toString()
Object.defineProperty
Object.create(o);
Object.assign(obj1, obj2);
Object.getPrototypeOf()
Object.getOwnPropertyNames(proto)


--------------------------------------------------------
typeof NaN
--------------------------------------------------------
void function iife() {

  console.log("Executed!");

}();
--------------------------------------------------------
function* foo(index) {
  while (index < 2) {
    yield index++;
  }
}

const iterator = foo(0);
iterator.next().value
iterator.next().value
--------------------------------------------------------
# Ajax : send clinet request to server
--------------------------------------------------------
# CallBack: everything on client side

    function resolve(){
    	setInterval(function(){
			console.log('Request successful!!!');
	    },9000);
    }
    function reject(){
    	setInterval(function(){
			console.error('Request time out.');
	    },3000);
    }
    function show(resolve, reject){
    	resolve();
    	reject();
    }
    show(resolve, reject);
--------------------------------------------------------
# Promises

var pr = new Promise(function(resolve, reject){
	    setInterval(function(){
			resolve('Request successful!!!');
	    },9000);
	    //request will take 9 seconds to return its output...
	    setInterval(function(){
			reject('Request Time Out.');
	    },3000);
	    //error will be displayed in 3 seconds...
	});
	pr.then(function(response){
	  	console.log(response);
	}).catch(function(response){
	  	console.error(response);
	});

pr.then(output).catch(error).finally(());
ex. window.fetch()
--------------------------------------------------------
async networkrequest(){
	let response = await $.ajax('myurl');
}
--------------------------------------------------------
networkrequest(cb){
	fetch(url).then(res => res.json()).then(cb);
}
var cb = function(response) { console.info('RESPONSE',response) }
networkrequest(cb);
--------------------------------------------------------
function networkrequest(cb) {
	fetch("https://sraban.github.io/php/htmls/table.json").then(res => res.json() ).then(cb);
}

var cb = (response) => { console.log('RESPONSE', response); };
networkrequest( cb  );
--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

