# Commands
============================
```sh
php -v
php --ini
sudo cp -a /etc/php/7.0/ /etc/php/7.0.backup
php -m
php -m > /tmp/7.1.modulelist.txt
php -i | grep -i --color gd
php -i | grep -i --color curl

php -r "echo ini_get('memory_limit').PHP_EOL;"
php -d memory_limit=-1

Built in server
php -S localhost:8080 -t public public/index.php


ls /var/lib/apt/lists/*
sudo apt-get clean && rm -rf /var/lib/apt/lists/*
sudo apt-get purge 'php*' 
sudo apt install php7.2-cli 


Installation
0. sudo apt-get install software-properties-common
1. sudo add-apt-repository ppa:ondrej/php
2. sudo apt-get update
3. sudo apt-get install php7.2-cli
3. sudo apt-get install php7.2-mysql php7.2-curl php7.2-json php7.2-cgi php7.2-xsl
4. php -v
5. ls /etc/apache2/mods-available/php*
6. ls /etc/apache2/mods-enabled/php*
7. sudo a2dismod php7.0
8. sudo a2enmod php7.2
9. apachectl -t
10. sudo service apache2 restart
11. ls /etc/apache2/mods-enabled/php*


---------PHP FPM Install --------------
1. sudo apt-get install python-software-properties
2. sudo add-apt-repository ppa:ondrej/php
3. sudo apt-get update
4. sudo apt-get install -y php7.2 php7.2-fpm
5. sudo apt-get install php7.2-mysql php7.2-curl php7.2-json
6. install mysql
7. sudo nano /etc/php/7.2/fpm/php.ini
8. cgi.fix_pathinfo=0
9. sudo nano /etc/php/7.2/fpm/pool.d/www.conf
10. #listen = /run/php/php7.2-fpm.sock
	listen = 127.0.0.1:9000
11. sudo nano /etc/nginx/conf.d/default.conf
12. 
{
    listen   80;

    root /var/www;
    index index.php index.html index.htm;
    server_name  example.com www.example.com;

    location / {
            try_files $uri $uri/ /index.html;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
          root /usr/share/nginx/www;
    }

    location ~ .php$ {
            try_files $uri =404;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
    }
}

13. 
	sudo service nginx restart
	sudo service php7.2-fpm restart

14.
sudo iptables -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT

15.
$ sudo ufw allow 80/tcp

16. phpinfo();

-----------------------
apt-cache search --names-only ^php



curl -H "Authorization: Bearer uk4MElNm_5BeMi66LX__TP_0XMtEpp7he_H_uqZw03M" "https://api.us-west-1.starter.openshift-online.com:6443/apis/user.openshift.io/v1/users/~"
```



# Thoughts
============================
Using Curl()
Using SimpleXMLObject();

	$xmlDoc = new DOMDocument();
	$xmlDoc->load("note.xml");
	print $xmlDoc->saveXML();

$soap = new SoapClient(url, headers);


# Links
============================






# Fundamentals
============================
Q. What are the Coding Standard to follow
Q. What are the optimisation technique

array_map()
array_walk()
array_filter()
array_reduce()
array_keys()







# Concepts in Program
============================
In PHP 
arrays are assigned by deepily copy, $arr2 = $arr1,
both are two diff array by default in php -- otherwise $arr2 = &$arr1;
while objects are assigned by reference by default, to deep copy to another object "clone" keyword is used 
so PHP will copy the array by default. References in PHP have to be explicit:





# Tips & Tricks
============================






# Programs 
============================





##############################################################

0. best way of handling errors
   ~ Errors are  handled by the envirnment
   ~ Expections are handled by application using try{} catch(Expection $e){} catch(DevidedByZero $x){} finally{}
   ~ all type of codes like DB::transaction(); DB::commit(); DB::rollback() are mannaged in try block

1. core php pre fundamentals
   ~ 


2. achieving patterns possiblities examples when insttiating, implementing abstract-interfaces : WAY TO ORGANISE CODE
	~ singleton pattern: object created once through out the project
	~ Facade pattern: 
	~ Factory Pattern:
	~ Observer Pattern: 
	~ 
3. mysql optimisation
	~ indexing should be followed
	~ operator{<>, =} need to be used rather "where column in()", "not in()", "whereExits()", "whereNotExits()"
	~ Explain Command to check the errors
	~ spcific column should be used rather generic form where soft has to identify( ex. select * from Employee)
	~ rewriting the sql queries

4. secuities
   ~ session & cookie hijacking
   ~ 					



5. mysql queries with employee and dept.
	~ employee having highest salary 
	  select * from Employee where salary = select max(salary) from Employee
	~ Employee having second highest salary
	  select max(salary) from Employee where salary not in( select max(salary) from Employee )
	~ emp, max salary, by department form both the table
	  select e.name, e.phone, max(e.salary) as high_salary, d.name from Employee e inner join Dept d on(e.dept_id = d.id) group by d.name


6. innodb and myisam


7. what is the logic behind require and require_once()
   ~ require once check the url already included else it require will be ignored

8. can interface be static


9. const PROJECT = 'Lila Travel'; which is written inside a class not in global concept at compile time
   define(PROJECT, 'Jilibi Travel'); in GLobal concept at run time


10. 

array_key_exists('key', $array);
isset(null) =====> false otherwise always true
isempty(0)  =====> true otherwise always return false

11.
ini_set('display_errors',1);
error_reporting(E_ALL);

12.


13. PDO stands for PHP Data Object.
It provides a vendor-neutral, lightweight, data-access abstraction layer. Thus, no matter what database we use, the function to issue queries and fetch data will be same. 
It focuses on data access abstraction rather than database abstraction.

14.
try {
    print "this is our try block n";
    throw new Exception();
} catch (Exception1 $e1) {
    print "something went wrong, caught yah! n";
} catch (Exception2 $e2) {
    print "something went wrong, caught yah! n";
} catch (Exception $e) {
    print "something went wrong, caught yah! n";
} finally {
    print "this part is always executed n";
}

---------------------------------------------------------------------------------
"echo" and "print" are more or less the same. They are both used to output data to the screen.
---------------------------------------------------------------------------------
function has_string_keys(array $array) {
  return count(array_filter(array_keys($array), 'is_string')) > 0;
}
---------------------------------------------------------------------------------
$b = clone $a; two seprate object copied by value
$c = $a; two same object copied by ref

---------------------------------------------------------------------------------
$something = 0;
echo ('password123' == $something) ? 'true' : 'false';
Ans: true - implicitily type cast to float value

'1e3' == '1000' // true

---------------------------------------------------------------------------------
What is use of Null Coalesce Operator?
Ans: always return first operand if not null
$name = $firstName ?? $username ?? $placeholder ?? "Guest"; 

---------------------------------------------------------------------------------
   All component and new componet should be ready for development in framework usages, and possible test suits
 - All Task to be defined in Sprint with timeline and discussion
 - Framework should be ready and tested with deployment of initial project
 - logging
 - Error handling to be manged from begining
 - data base table to be ready using migration step by step
 - modular basis codes
 - updated to bitbucket or github from branch
 - then to be fetched to production server from git/svn
---------------------------------------------------------------------------------
Q.explain what is a closure in PHP and why does it use the “use” identifier?
public function getTotal($tax)
{
    $total = 0.00;

    $callback = function ($quantity, $product) use ($tax, &$total)
        {
            $pricePerItem = constant( __CLASS__ . "::PRICE_" .strtoupper($product) );
            $total += ($pricePerItem * $quantity) * ($tax + 1.0);
        };

    array_walk($this->products, $callback);
    return round($total, 2);
}
---------------------------------------------------------------------------------
How to measure execution times of PHP scripts?
means bench marking of of codes
---------------------------------------------------------------------------------
Rest: POST ~ PUT ~ PATCH


POST: 
  ~ Not idempotent method, used to create records in DB
  ~ Since record does not exits before, save url and return url is different. 


PUT :
  ~ This method is idempotent. means client and server urls are same.
  ~ Used for updating a resource by using the primary key.
  ~ The method specifiy to full update of record.


PATCH : 
  ~ This is same as PUT, only difffernce is partially the records are updated 

---------------------------------------------------------------------------------
Soap ~ Rest

Rest:
 ~ Rest can be fetched from cahced storage instead of always heating to Server
 ~ Rest is Stateless
 ~ Soap needs heavy bandwidth, Rest can work in very low bandwidth
 ~ SOAP only works with XML formats whereas REST work with plain text, XML, HTML and JSON.
 - SOAP is a protocol whereas REST is an architectural pattern.
 - SOAP cannot make use of REST whereas REST can make use of SOAP.
 ~ Challenges in Rest - Lack of Security & Lack of state.
 ~ SOAP has its own documentation WSDL format, where endopint and operation methods are defined 



Array Transformation using following methods
---------------------------------------------------------------------------------
array_map($callback, array1, array2,...) 
returns a new array

array_filter($array, $callback)
picks only a subset of the elements of the array according to a filtering function.It does preserve the keys.

array_walk($array, $callback)
only returns true

array_reduce($array, $callback, $accumulator)
returns the accumulator

<?php //php 7.0.8
$origarray1 = array(2.4, 2.6, 3.5);
$origarray2 = array(2.4, 2.6, 3.5, 4, 9, 'a');
print_r(array_map(function (&$row1, $row2) { return $row1 + $row2; }, $origarray1, $origarray2));
//returned a new array

print_r(array_map(function (&$row) { return ceil($row); }, $origarray1)); // returned new array
print_r($origarray1); // no changes to array



print_r(array_walk($origarray2, function (&$row, $key) { $row = floor($row); })); // returned 1
//print_r($origarray2); // modified in same array no third array print_r
 

print_r(array_filter($origarray1, function ($a) { return $a > 2.5; })); // subset of new array


function array_reduce($array, $function, $accumulator) {
  foreach ($array as $element) {
    $accumulator = $function($accumulator, $element);
  }
  return $accumulator;
}

array_reduce($inputs,
             function($accumulator, $element) {
               if (valid($element)) $accumulator[] = transform($element);
               return $accumulator;
             },
             array());
?>
---------------------------------------------------------------------------------
ORM: Object Relational Mapping


---------------------------------------------------------------------------------
about callback, closure & lambada function in php ? 

---------------------------------------------------------------------------------
https://pasteboard.co/J3J4BU5.png

---------------------------------------------------------------------------------
Curl:
$handle = curl_init();
curl_setopt($handle, CURLOPT_URL, $url);
$data = curl_exec($handle);
curl_close($handle);
---------------------------------------------------------------------------------
File:
$handle = fopen('/tmp.txt','a+'); r, w
fwrite($handle, 'data.....');
fwrite($handle, 'data.....');
fclose($handle);
---------------------------------------------------------------------------------
copy($_FILES['name']['tmp_file_name'], 'sraban.jpg');
move_uplodaed_file($_FILES['name']['tmp_file_name'], 'sraban.jpg');
---------------------------------------------------------------------------------
How to upload a huge file to Server using php?
array_chunck(); --> devides array into sub arrays
configure chunck size in javascript y deviding the emory into small parts
upload_max_filesize and post_max_size a not affected



---------------------------------------------------------------------------------
How to handle huge http request in apache;

---------------------------------------------------------------------------------

# math functions
max($arr)
min($arr)
floor()
ceil()
abs()
round()
sqrt()
pi()
mt_rand(10,100);
log()
sin()
cos()




# Array functions
--------------------------------------------
each(), current(), next(), prev(), pos()
key()
end()
count()
compact() ---- extract()
in_array() ----- array_search()
array_pad()
array_slice()
array_splice()  --- deleting the elements from some index to length means getting the rows
array_sum()
array_reverse()
array_keys()
array_values()
array_chunk()
array_merge() ---- array_combine()
array_push()
array_pop()
array_shift()
array_unshift()
array_diff()
array_fill()
*array_column()
*array_flip()
*array_intersect()
*array_filter($a, $callback)
array_walk($a, $callback)
*array_map($callback,$a)

list()
shuffle()
reset()
range()
usort()
sort()
rsort()
asort()
arsort()
ksort()
krsort()
natsort()
natcasesort()
array_multisort()


# String Functions
----------------------------
strrev('noon')
explode() / str_split()
implode() / join()
echo()
htmlentities()
ucwords("hello world");
lcfirst()
ucfirst()
trim() / ltrim() / rtrim()
crypt()
sh1()
md5()
md5_file()
htmlentities()
nl2br()
number_format()

str_replace(find,string,paragraph);
str_repeat("Wow",13);
str_pad($str,20,".");
str_shuffle("Hello World")
str_word_count("Hello world! wew wewe"); // 4
strlen("Hello world! wew wewe"); // 21
strcasecmp("Hello world!","HELLO WORLD!"); 0
strcmp("Hello world!","HELLO WORLD!"); 1
stripos("php I love","PHP");  // position of first ocurance with case insensitive
strrpos("I love php, I love php too!","php"); // postion of last occurence
stristr("Hello world!3123123123","WORLD"); // from first occurance
strrchr("world Hello world!111111111111","world"); // from last maching of sum of chars
stotolower()
strtoupper()
strtr("Hilla Warld","ia","eo");
substr(sentence,0,100)
substr_replace("Hello  world sraban","earth",6);
substr_count("Hello world. The world is nice","world");
wordwrap($str,15,"<br>\n");
filter_input(http_type, variable, filter, options)


# Useful Functions
----------------------
phpinfo()
json_encode()
json_decode($str,true);
hrtime();
mktime()
strtotime()
define()
constant()
die()
eval()
exit()
uniqid()
sleep()
debug_print_backtrace()
spl_register_autoload()
highlight_file(__FILE__);
highlight_string("<?php phpinfo(); ?>");
register_shutdown_function("check_abort");
get_browser()
php_strip_whitespace ("test.php")
show_source("test.php")
sleep()
usleep()

---------------------------------------------------------------------------------

---------------------------------------------------------------------------------

---------------------------------------------------------------------------------

---------------------------------------------------------------------------------

---------------------------------------------------------------------------------


highlight_file(__file__);
print_r($GLOBALS);




-----------------------------------------------------------------------------------
# PHP-CS-FIXER
https://cs.symfony.com/
https://github.com/FriendsOfPHP/PHP-CS-Fixer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vendor/bin/php-cs-fixer fix --config=.php_cs.dist
vendor/bin/php-cs-fixer fix --config=.php_cs.dist -v --dry-run --stop-on-violation --using-cache=no
vendor/bin/php-cs-fixer fix /path/to/dir --rules=line_ending,full_opening_tag,indentation_type
vendor/bin/php-cs-fixer fix /path/to/project --rules=@Symfony,-@PSR1,-blank_line_before_statement,strict_comparison

vendor/bin/php-cs-fixer fix /path/to/project --rules=@PSR2
vendor/bin/php-cs-fixer fix /path/to/project --rules=@Symfony,-@PSR1,-blank_line_before_statement,strict_comparison
php-cs-fixer fix /path/to/dir --rules=line_ending,full_opening_tag,indentation_type
php-cs-fixer fix /path/to/dir --rules='{"concat_space": {"spacing": "none"}}'
php-cs-fixer fix /path/to/dir --diff -
php-cs-fixer fix -v --diff
php-cs-fixer fix list
php-cs-fixer fix -V
-----------------------------------------------------------------------------------