
MVC architectural pattern
$php artisan -version  
$php artisan help
$php artisan tinker 
  - Laravel's artisan tinker is a repl (Read-Eval-Print Loop).
$




# Features Laravel
Some of the main features of Laravel are:

1. Eloquent ORM - Advanced PHP implementation of the active record pattern. Eloquent ORM represents database tables as classes
    Blog::whereBetween('created_at', [$date1, $date2])->get(); data between dates
  
2. Query builder - Provides more direct access to the database, alternative to the Eloquent ORM. It also allows specific caching of the results of the executed queries. Provides Aggreates - count(), max(), min(), avg(), sum()
3. Reverse Routing - 
    - Route::get('login', 'users@login');  
      {{ HTML::link_to_action('users@login') }}
4. Restful Controllers - 
5. Migrations - 
6. Database Seeding - 
7. Unit Testing - 
    - Unit testing is built-in testing provided as an integral part of Laravel. It consists of unit tests which detect and prevent regressions in the framework. Unit tests can be run through the available artisan command-line utility.
8. Homestead - 
    - Homestead is an official, pre-packaged, vagrant virtual machine which provides Laravel developers all the necessary tools to develop Laravel out of the box
    - It also includes Ubuntu, Gulp, Bower, and other development tools which are useful in developing full-scale web applications. It provides a development environment which can be used without the additional need to install PHP, a web server, or any other server software on the machine.

9. Supports popular caching backends like Memcached and Redis. By default, Laravel is configured to use file cache driver
10. Middleware is a form of HTTP requests filtering mechanism.
      Global Middleware
      Route Middleware 
      $php artisan make:middleware UserMiddleware 
        Now, UserMiddleware.php file will be created in app/Http/Middleware.

11. Official Packages
    - Default authenitcation and authorisation
    - *Passport - https://www.youtube.com/watch?v=HGh0cKEVXPI
    - Cashier
    - *Envoy
    - *Scout
    - *elixir
    - *Socialite : fluent interface to OAuth authentication with Facebook, Twitter, Google, and Linkedln, etc
		- Telescope
    - Horizon

12. *Event Handlers

13. *Lumen Microframework built on laravels top component
    - $composer create-project --prefer-dist laravel/lumen blog  
    - Lumen provides support for features such as logging, routing, caching queues, validation, error handling, middleware, dependency injection, controllers, blade templating, command scheduler, database abstraction, the service container, and Eloquent ORM, etc.
    - 



# Bundles
  Behat Testing, Carbon Dates


# Clearing Cache
  php artisan config: clear
  php artisan cache: clear
  php artisan config: cache



# Security
  - CSRF protection stands for Cross-Site Request Forgery protection.
  - CSRF detects unauthorized attacks on web applications by the unauthorized users of a system

    classVerifyCsrfToken extends BaseVerifier  
    {  
    protected $except = [  
            'Pass here your URL',  
          ];  
    }



# Facades in Laravel
  - Laravel Facades provide static-like interface classes which are available in the application's service container.
  - It is described in the Illuminate\Support\Facades namespace
  - Laravel self-ships with several available facades, gives access to almost all features of Laravel
  - Facades also help to access a service directly from the container itself.
  ex.
    use Illuminate\Support\Facades\Cache; 

    Route::get('/cache', function () {  
      return Cache::get('PutkeyNameHere');  
    })  



# Service Provider, 



# Event Handlers
  - Events in Laravel provide simple observer implementations which allow us to subscribe and listen for events within our application
  - The event classes are stored in app/Events, while their listeners are stored in app/Listeners of our application.
  - A single event may contain multiple listeners that do not depend on each other
  ex.
    - A new user is registered.
    - A new comment is posted.
    - User login/logout.
    - A new product is added.


# *Service container and its advantages.
  - It is an important, powerful tool for resolving class dependencies and performing dependency injection in Laravel. It is also known as IoC container.
  - It can handle class dependencies on object creation.
  - It can combine interfaces to concrete classes.

# Laravel & CodeIgniter

  Laravel can produce 
    * model-view-controller, 
    * active-record, 
    * ORM
    * observer, 
    * dependency injection, 
    * singleton, 
    * restful, 
    * faÃ§ade, 
    * event-driven, 
    * MTV, and HMVC design patterns.  

  Codeigniter is an older, more mature framework.
  Codeigniter can produce 
    * active-record, 
    * model-view-controller, and HMVC design patterns.


# Envirnment Info
  -
  $user_ip_address = $request->ip();  
  -
  class User extends Eloquent{  
    protected $table="my_user_table";  
  }
  - consumes less memory with a single query from Large SQL dataset
  foreach (Product::where('name', 'bar')->cursor() as $flight) {  
    //make some stuff  
  }  

# custom Helper $composer dump-autoload or composer update
in composer.json
"files": [  
"app/helpers.php"  
]  


# PHP compact('sraban','kumar','pahadasingh')
  - will create an associative array by searching name as variable

# *Relationships are available in Laravel Eloquent?
  - One to One
  - One to Many
  - One to Many (Inverse)
  - Many to Many
  - Has Many Through
  - Polymorphic Relations
  - Many To Many Polymorphic Relations

# How can we implement a package in Laravel?
    We can implement a package in Laravel by:

    - Creating a package folder and name it.
    - Creating Composer.json file for the package.
    - Loading package through main composer.json and PSR-4.
    - Creating a Service Provider.
    - Creating a Controller for the package.
    - Creating a Routes.php file.


# Closures in Laravel?
    In Laravel, a Closure is an anonymous method which can be used as a callback function. 
    It can also be used as a parameter in a function. 
    A Closure can access the variables outside the scope of the variable.
    It is possible to pass parameters into a Closure. 
    It can be done by changing the Closure function call in the handle() method to provide parameters to it. 

# Perfomance
  Database Chunking - Quick Laravel Performance Tips
  App\Post::all() --> App\Post::chunk()

  Optimize API Return Kilobytes, not only Eloquent


# Relation(ORM)
  
  $request->all() ------> $request->only(['name','age']);

  User::with('relation','project')->get(); --->

  return [
    id => $this->id,
    name => $this->name,
    created_at => $this->created_at,
    project => [
      name => this->project->name
    ]
  ];

# how-to-structure-laravel-project

# 

# 

# 




